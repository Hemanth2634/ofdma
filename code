import numpy as np
import matplotlib.pyplot as plt

# ----------------------------- QPSK Modulation -----------------------------
def qpsk_modulate(bits):
    bits = bits.reshape((-1, 2))
    symbols = (2*bits[:,0]-1) + 1j*(2*bits[:,1]-1)
    return symbols / np.sqrt(2)

def qpsk_demodulate(symbols):
    bits = np.zeros((len(symbols), 2), dtype=int)
    bits[:,0] = (symbols.real > 0).astype(int)
    bits[:,1] = (symbols.imag > 0).astype(int)
    return bits.reshape(-1)

# ----------------------------- Rayleigh Channel -----------------------------
def rayleigh_fading(signal):
    h = (np.random.randn(len(signal)) + 1j*np.random.randn(len(signal))) / np.sqrt(2)
    faded = signal * h
    return faded, h

# ----------------------------- OFDMA Transmitter -----------------------------
def ofdma_transmitter(data_bits, num_users, subcarriers_per_user, N_fft, cp_len):
    mod_symbols = qpsk_modulate(data_bits)
    symbols_per_user = len(mod_symbols) // num_users
    tx_signal = []

    for i in range(num_users):
        user_symbols = mod_symbols[i*symbols_per_user : (i+1)*symbols_per_user]
        user_ofdm = []

        for j in range(0, len(user_symbols), subcarriers_per_user):
            freq_data = np.zeros(N_fft, dtype=complex)
            freq_data[i*subcarriers_per_user:(i+1)*subcarriers_per_user] = user_symbols[j:j+subcarriers_per_user]
            time_data = np.fft.ifft(freq_data)
            # Add cyclic prefix
            time_cp = np.concatenate([time_data[-cp_len:], time_data])
            user_ofdm.append(time_cp)

        tx_signal.append(np.concatenate(user_ofdm))

    return np.array(tx_signal)

# ----------------------------- OFDMA Receiver -----------------------------
def ofdma_receiver(rx_signal, h_estimates, num_users, subcarriers_per_user, N_fft, cp_len):
    all_bits = []

    for i in range(num_users):
        user_rx = rx_signal[i]
        ofdm_symbols = user_rx.reshape(-1, N_fft + cp_len)
        user_data = []

        for sym_idx, sym in enumerate(ofdm_symbols):
            time_no_cp = sym[cp_len:]
            freq_data = np.fft.fft(time_no_cp)

            h = h_estimates[i][sym_idx*(N_fft + cp_len) + cp_len : sym_idx*(N_fft + cp_len) + cp_len + N_fft]
            faded_subcarriers = freq_data[i*subcarriers_per_user:(i+1)*subcarriers_per_user]
            h_sub = h[i*subcarriers_per_user:(i+1)*subcarriers_per_user]
            equalized = faded_subcarriers / h_sub
            user_data.extend(equalized)

        bits = qpsk_demodulate(np.array(user_data))
        all_bits.append(bits)

    return all_bits

# ----------------------------- SNR Sweep -----------------------------
def simulate_ber_vs_snr():
    num_users = 2
    subcarriers_per_user = 4
    N_fft = 8
    cp_len = 2
    num_ofdm_symbols = 100
    snr_dBs = np.arange(0, 21, 2)
    ber_user1 = []
    ber_user2 = []

    for snr_db in snr_dBs:
        snr_linear = 10**(snr_db/10)
        noise_variance = 1 / (2 * snr_linear)

        total_bits = num_users * subcarriers_per_user * 2 * num_ofdm_symbols
        data_bits = np.random.randint(0, 2, total_bits)
        tx_signal = ofdma_transmitter(data_bits, num_users, subcarriers_per_user, N_fft, cp_len)

        rx_signal = np.zeros_like(tx_signal, dtype=complex)
        h_estimates = []

        for i in range(num_users):
            faded, h = rayleigh_fading(tx_signal[i])
            noise = np.sqrt(noise_variance) * (np.random.randn(*faded.shape) + 1j*np.random.randn(*faded.shape))
            rx_signal[i] = faded + noise
            h_estimates.append(h)

        received_bits = ofdma_receiver(rx_signal, h_estimates, num_users, subcarriers_per_user, N_fft, cp_len)

        bits_user1 = data_bits[0:len(received_bits[0])]
        bits_user2 = data_bits[len(received_bits[0]):]

        ber1 = np.mean(bits_user1 != received_bits[0])
        ber2 = np.mean(bits_user2 != received_bits[1])

        ber_user1.append(ber1)
        ber_user2.append(ber2)
        print(f"SNR {snr_db} dB - User 1 BER: {ber1:.4f}, User 2 BER: {ber2:.4f}")

    return snr_dBs, ber_user1, ber_user2

# ----------------------------- Plot BER vs SNR -----------------------------
def plot_ber(snr_dBs, ber_user1, ber_user2):
    plt.figure(figsize=(8, 5))
    plt.semilogy(snr_dBs, ber_user1, 'o-', label='User 1')
    plt.semilogy(snr_dBs, ber_user2, 's-', label='User 2')
    plt.xlabel('SNR (dB)')
    plt.ylabel('Bit Error Rate (BER)')
    plt.title('BER vs. SNR for OFDMA (QPSK, Rayleigh Fading)')
    plt.grid(True, which='both')
    plt.legend()
    plt.tight_layout()
    plt.savefig("ber_vs_snr.png")
    plt.show()

# ----------------------------- Run Everything -----------------------------
if __name__ == "__main__":
    snr_dBs, ber_user1, ber_user2 = simulate_ber_vs_snr()
    plot_ber(snr_dBs, ber_user1, ber_user2)
